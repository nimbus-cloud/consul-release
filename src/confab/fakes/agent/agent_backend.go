// This file was generated by counterfeiter
package main

import (
	"sync"

	"github.com/hashicorp/consul/command/agent"
	"github.com/hashicorp/consul/consul/structs"
	"github.com/hashicorp/serf/serf"
)

type FakeAgentBackend struct {
	rpcMutex              sync.RWMutex
	ForceLeaveStub        func(string) error
	forceLeaveArgsForCall []struct {
		arg1 string
	}
	forceLeaveReturns struct {
		result1 error
	}
	JoinWANStub        func([]string) (int, error)
	joinWANArgsForCall []struct {
		arg1 []string
	}
	joinWANReturns struct {
		result1 int
		result2 error
	}
	JoinLANStub        func([]string) (int, error)
	joinLANArgsForCall []struct {
		arg1 []string
	}
	joinLANReturns struct {
		result1 int
		result2 error
	}
	LANMembersStub        func() []serf.Member
	lANMembersArgsForCall []struct{}
	lANMembersReturns     struct {
		result1 []serf.Member
	}
	WANMembersStub        func() []serf.Member
	wANMembersArgsForCall []struct{}
	wANMembersReturns     struct {
		result1 []serf.Member
	}
	LeaveStub        func() error
	leaveArgsForCall []struct{}
	leaveReturns     struct {
		result1 error
	}
	ShutdownStub        func() error
	shutdownArgsForCall []struct{}
	shutdownReturns     struct {
		result1 error
	}
	StatsStub        func() map[string]map[string]string
	statsArgsForCall []struct{}
	statsReturns     struct {
		result1 map[string]map[string]string
	}
	ListKeysStub        func(string) (*structs.KeyringResponses, error)
	listKeysArgsForCall []struct {
		arg1 string
	}
	listKeysReturns struct {
		result1 *structs.KeyringResponses
		result2 error
	}
	InstallKeyStub        func(string, string) (*structs.KeyringResponses, error)
	installKeyArgsForCall []struct {
		arg1 string
		arg2 string
	}
	installKeyReturns struct {
		result1 *structs.KeyringResponses
		result2 error
	}
	UseKeyStub        func(string, string) (*structs.KeyringResponses, error)
	useKeyArgsForCall []struct {
		arg1 string
		arg2 string
	}
	useKeyReturns struct {
		result1 *structs.KeyringResponses
		result2 error
	}
	RemoveKeyStub        func(string, string) (*structs.KeyringResponses, error)
	removeKeyArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeKeyReturns struct {
		result1 *structs.KeyringResponses
		result2 error
	}
}

func (fake *FakeAgentBackend) ForceLeave(arg1 string) error {
	fake.rpcMutex.Lock()
	fake.forceLeaveArgsForCall = append(fake.forceLeaveArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.rpcMutex.Unlock()
	if fake.ForceLeaveStub != nil {
		return fake.ForceLeaveStub(arg1)
	} else {
		return fake.forceLeaveReturns.result1
	}
}

func (fake *FakeAgentBackend) ForceLeaveCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.forceLeaveArgsForCall)
}

func (fake *FakeAgentBackend) ForceLeaveArgsForCall(i int) string {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return fake.forceLeaveArgsForCall[i].arg1
}

func (fake *FakeAgentBackend) ForceLeaveReturns(result1 error) {
	fake.ForceLeaveStub = nil
	fake.forceLeaveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgentBackend) JoinWAN(arg1 []string) (int, error) {
	fake.rpcMutex.Lock()
	fake.joinWANArgsForCall = append(fake.joinWANArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.rpcMutex.Unlock()
	if fake.JoinWANStub != nil {
		return fake.JoinWANStub(arg1)
	} else {
		return fake.joinWANReturns.result1, fake.joinWANReturns.result2
	}
}

func (fake *FakeAgentBackend) JoinWANCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.joinWANArgsForCall)
}

func (fake *FakeAgentBackend) JoinWANArgsForCall(i int) []string {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return fake.joinWANArgsForCall[i].arg1
}

func (fake *FakeAgentBackend) JoinWANReturns(result1 int, result2 error) {
	fake.JoinWANStub = nil
	fake.joinWANReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentBackend) JoinLAN(arg1 []string) (int, error) {
	fake.rpcMutex.Lock()
	fake.joinLANArgsForCall = append(fake.joinLANArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.rpcMutex.Unlock()
	if fake.JoinLANStub != nil {
		return fake.JoinLANStub(arg1)
	} else {
		return fake.joinLANReturns.result1, fake.joinLANReturns.result2
	}
}

func (fake *FakeAgentBackend) JoinLANCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.joinLANArgsForCall)
}

func (fake *FakeAgentBackend) JoinLANArgsForCall(i int) []string {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return fake.joinLANArgsForCall[i].arg1
}

func (fake *FakeAgentBackend) JoinLANReturns(result1 int, result2 error) {
	fake.JoinLANStub = nil
	fake.joinLANReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentBackend) LANMembers() []serf.Member {
	fake.rpcMutex.Lock()
	fake.lANMembersArgsForCall = append(fake.lANMembersArgsForCall, struct{}{})
	fake.rpcMutex.Unlock()
	if fake.LANMembersStub != nil {
		return fake.LANMembersStub()
	} else {
		return fake.lANMembersReturns.result1
	}
}

func (fake *FakeAgentBackend) LANMembersCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.lANMembersArgsForCall)
}

func (fake *FakeAgentBackend) LANMembersReturns(result1 []serf.Member) {
	fake.LANMembersStub = nil
	fake.lANMembersReturns = struct {
		result1 []serf.Member
	}{result1}
}

func (fake *FakeAgentBackend) WANMembers() []serf.Member {
	fake.rpcMutex.Lock()
	fake.wANMembersArgsForCall = append(fake.wANMembersArgsForCall, struct{}{})
	fake.rpcMutex.Unlock()
	if fake.WANMembersStub != nil {
		return fake.WANMembersStub()
	} else {
		return fake.wANMembersReturns.result1
	}
}

func (fake *FakeAgentBackend) WANMembersCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.wANMembersArgsForCall)
}

func (fake *FakeAgentBackend) WANMembersReturns(result1 []serf.Member) {
	fake.WANMembersStub = nil
	fake.wANMembersReturns = struct {
		result1 []serf.Member
	}{result1}
}

func (fake *FakeAgentBackend) Leave() error {
	fake.rpcMutex.Lock()
	fake.leaveArgsForCall = append(fake.leaveArgsForCall, struct{}{})
	fake.rpcMutex.Unlock()
	if fake.LeaveStub != nil {
		return fake.LeaveStub()
	} else {
		return fake.leaveReturns.result1
	}
}

func (fake *FakeAgentBackend) LeaveCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.leaveArgsForCall)
}

func (fake *FakeAgentBackend) LeaveReturns(result1 error) {
	fake.LeaveStub = nil
	fake.leaveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgentBackend) Shutdown() error {
	fake.rpcMutex.Lock()
	fake.shutdownArgsForCall = append(fake.shutdownArgsForCall, struct{}{})
	fake.rpcMutex.Unlock()
	if fake.ShutdownStub != nil {
		return fake.ShutdownStub()
	} else {
		return fake.shutdownReturns.result1
	}
}

func (fake *FakeAgentBackend) ShutdownCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.shutdownArgsForCall)
}

func (fake *FakeAgentBackend) ShutdownReturns(result1 error) {
	fake.ShutdownStub = nil
	fake.shutdownReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgentBackend) Stats() map[string]map[string]string {
	fake.rpcMutex.Lock()
	fake.statsArgsForCall = append(fake.statsArgsForCall, struct{}{})
	fake.rpcMutex.Unlock()
	if fake.StatsStub != nil {
		return fake.StatsStub()
	} else {
		return fake.statsReturns.result1
	}
}

func (fake *FakeAgentBackend) StatsCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.statsArgsForCall)
}

func (fake *FakeAgentBackend) StatsReturns(result1 map[string]map[string]string) {
	fake.StatsStub = nil
	fake.statsReturns = struct {
		result1 map[string]map[string]string
	}{result1}
}

func (fake *FakeAgentBackend) ListKeys(arg1 string) (*structs.KeyringResponses, error) {
	fake.rpcMutex.Lock()
	fake.listKeysArgsForCall = append(fake.listKeysArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.rpcMutex.Unlock()
	if fake.ListKeysStub != nil {
		return fake.ListKeysStub(arg1)
	} else {
		return fake.listKeysReturns.result1, fake.listKeysReturns.result2
	}
}

func (fake *FakeAgentBackend) ListKeysCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.listKeysArgsForCall)
}

func (fake *FakeAgentBackend) ListKeysArgsForCall(i int) string {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return fake.listKeysArgsForCall[i].arg1
}

func (fake *FakeAgentBackend) ListKeysReturns(result1 *structs.KeyringResponses, result2 error) {
	fake.ListKeysStub = nil
	fake.listKeysReturns = struct {
		result1 *structs.KeyringResponses
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentBackend) InstallKey(arg1 string, arg2 string) (*structs.KeyringResponses, error) {
	fake.rpcMutex.Lock()
	fake.installKeyArgsForCall = append(fake.installKeyArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.rpcMutex.Unlock()
	if fake.InstallKeyStub != nil {
		return fake.InstallKeyStub(arg1, arg2)
	} else {
		return fake.installKeyReturns.result1, fake.installKeyReturns.result2
	}
}

func (fake *FakeAgentBackend) InstallKeyCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.installKeyArgsForCall)
}

func (fake *FakeAgentBackend) InstallKeyArgsForCall(i int) (string, string) {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return fake.installKeyArgsForCall[i].arg1, fake.installKeyArgsForCall[i].arg2
}

func (fake *FakeAgentBackend) InstallKeyReturns(result1 *structs.KeyringResponses, result2 error) {
	fake.InstallKeyStub = nil
	fake.installKeyReturns = struct {
		result1 *structs.KeyringResponses
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentBackend) UseKey(arg1 string, arg2 string) (*structs.KeyringResponses, error) {
	fake.rpcMutex.Lock()
	fake.useKeyArgsForCall = append(fake.useKeyArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.rpcMutex.Unlock()
	if fake.UseKeyStub != nil {
		return fake.UseKeyStub(arg1, arg2)
	} else {
		return fake.useKeyReturns.result1, fake.useKeyReturns.result2
	}
}

func (fake *FakeAgentBackend) UseKeyCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.useKeyArgsForCall)
}

func (fake *FakeAgentBackend) UseKeyArgsForCall(i int) (string, string) {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return fake.useKeyArgsForCall[i].arg1, fake.useKeyArgsForCall[i].arg2
}

func (fake *FakeAgentBackend) UseKeyReturns(result1 *structs.KeyringResponses, result2 error) {
	fake.UseKeyStub = nil
	fake.useKeyReturns = struct {
		result1 *structs.KeyringResponses
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentBackend) RemoveKey(arg1 string, arg2 string) (*structs.KeyringResponses, error) {
	fake.rpcMutex.Lock()
	fake.removeKeyArgsForCall = append(fake.removeKeyArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.rpcMutex.Unlock()
	if fake.RemoveKeyStub != nil {
		return fake.RemoveKeyStub(arg1, arg2)
	} else {
		return fake.removeKeyReturns.result1, fake.removeKeyReturns.result2
	}
}

func (fake *FakeAgentBackend) RemoveKeyCallCount() int {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return len(fake.removeKeyArgsForCall)
}

func (fake *FakeAgentBackend) RemoveKeyArgsForCall(i int) (string, string) {
	fake.rpcMutex.RLock()
	defer fake.rpcMutex.RUnlock()
	return fake.removeKeyArgsForCall[i].arg1, fake.removeKeyArgsForCall[i].arg2
}

func (fake *FakeAgentBackend) RemoveKeyReturns(result1 *structs.KeyringResponses, result2 error) {
	fake.RemoveKeyStub = nil
	fake.removeKeyReturns = struct {
		result1 *structs.KeyringResponses
		result2 error
	}{result1, result2}
}

var _ agent.AgentBackend = new(FakeAgentBackend)
