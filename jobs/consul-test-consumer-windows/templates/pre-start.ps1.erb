$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

$RUN_DIR="C:\var\vcap\sys\run\consul-test-consumer-windows"
$LOG_DIR="C:\var\vcap\sys\log\consul-test-consumer-windows"
$PKG_DIR="C:\var\vcap\packages\acceptance-tests-windows"
$RUN_DIR="/var/vcap/sys/run"
New-Item -ItemType Directory -Force -Path "${RUN_DIR}"
New-Item -ItemType Directory -Force -Path "${LOG_DIR}"
New-Item -ItemType Directory -Force -Path "${PKG_DIR}"
New-Item -ItemType Directory -Force -Path "${RUN_DIR}"

<% if !p("consul-test-consumer.nameserver").empty? %>
    # Not Implemented:
    #  - echo "options timeout:30" >> "${resolvconf_file}"
    function DnsServers($interface) {
      return (Get-DnsClientServerAddress -InterfaceAlias $interface -AddressFamily ipv4 -ErrorAction Stop).ServerAddresses
    }

    function WaitForDNSLock() {
        while ($true) {
          try {
            New-Item C:\var\vcap\sys\run\consul-dns.lock -type file
            return
          } catch {
            Write-Host "DNS lock exists..."
          }
          Start-Sleep 1
        }
    }

    function ReleaseDNSLock() {
      Remove-Item C:\var\vcap\sys\run\consul-dns.lock
    }

    $nameserver='<%= p("consul-test-consumer.nameserver") %>'
    WaitForDNSLock
    [array]$routeable_interfaces = Get-WmiObject Win32_NetworkAdapterConfiguration | Where { $_.IpAddress -AND ($_.IpAddress | Where { $addr = [Net.IPAddress] $_; $addr.AddressFamily -eq "InterNetwork" -AND ($addr.address -BAND ([Net.IPAddress] "255.255.0.0").address) -ne ([Net.IPAddress] "169.254.0.0").address }) }
    $ifindex = $routeable_interfaces[0].Index
    $interface = (Get-WmiObject Win32_NetworkAdapter | Where { $_.DeviceID -eq $ifindex }).netconnectionid
    $servers = DnsServers($interface)
    if($servers -Contains "${nameserver}")
    {
        Write-Host "DNS Servers are set correctly."
    }
    else
    {
        Write-Host "Setting DNS Servers"
        # Insert new record at index 1 matching behavior of:
        #
        #   `sed -i -e "2i nameserver $nameserver" "${resolvconf_file}"`
        #
        $newDNS = $servers[0], $nameserver, $servers[1..$servers.length]
        Set-DnsClientServerAddress -InterfaceAlias $interface -ServerAddresses $newDNS
        $servers = DnsServers($interface)
        if($servers -NotContains "${nameserver}") {
            Write-Error "Failed to set the DNS Servers"
            Exit 1
        }
    }
    ReleaseDNSLock
<% end %>

$status = (Get-NetFirewallRule -Name CFAllowConsulConsumer -ErrorAction Ignore).PrimaryStatus
if ($status -ne "OK") {
    $admins = New-Object System.Security.Principal.NTAccount("Administrators")
    $adminsSid = $admins.Translate([System.Security.Principal.SecurityIdentifier])
    $LocalUser = "D:(A;;CC;;;$adminsSid)"
    $otherAdmins = Get-WmiObject win32_groupuser |
        Where-Object { $_.GroupComponent -match 'administrators' } |
        ForEach-Object { [wmi]$_.PartComponent }
    foreach($admin in $otherAdmins)
    {
        $ntAccount = New-Object System.Security.Principal.NTAccount($admin.Name)
        $sid = $ntAccount.Translate([System.Security.Principal.SecurityIdentifier]).Value
        $LocalUser = $LocalUser + "(A;;CC;;;$sid)"
    }
    New-NetFirewallRule -Name CFAllowConsulConsumer -Description "Allow Consul-Consumer" `
        -DisplayName "Allow Consul-Consumer" -Protocol TCP -LocalPort 6769 -Action allow -LocalUser $LocalUser
    $status = (Get-NetFirewallRule -Name CFAllowConsulConsumer -ErrorAction Ignore).PrimaryStatus
    if ($status -ne "OK") {
        Write-Error "Failed to Create CFAllowConsulConsumer Firewall rule"
    }
}

Exit 0
