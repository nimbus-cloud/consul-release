$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

$LOG_DIR="/var/vcap/sys/log/consul_agent_windows"
$DATA_DIR="/var/vcap/data/consul_agent_windows"
$CONF_DIR="/var/vcap/jobs/consul_agent_windows/config"
$RUN_DIR="/var/vcap/sys/run"
$CERT_DIR="$CONF_DIR/certs"
New-Item -ItemType Directory -Force -Path "${LOG_DIR}"
New-Item -ItemType Directory -Force -Path "${DATA_DIR}"
New-Item -ItemType Directory -Force -Path "${CONF_DIR}"
New-Item -ItemType Directory -Force -Path "${CERT_DIR}"
New-Item -ItemType Directory -Force -Path "${RUN_DIR}"
function DnsServers($interface) {
  return (Get-DnsClientServerAddress -InterfaceAlias $interface -AddressFamily ipv4 -ErrorAction Stop).ServerAddresses
}

function WaitForDNSLock() {
    while ($true) {
      try {
        New-Item C:\var\vcap\sys\run\consul-dns.lock -type file
        return
      } catch {
        Write-Host "DNS lock exists..."
      }
      Start-Sleep 1
    }
}

function ReleaseDNSLock() {
  Remove-Item C:\var\vcap\sys\run\consul-dns.lock
}

WaitForDNSLock
[array]$routeable_interfaces = Get-WmiObject Win32_NetworkAdapterConfiguration | Where { $_.IpAddress -AND ($_.IpAddress | Where { $addr = [Net.IPAddress] $_; $addr.AddressFamily -eq "InterNetwork" -AND ($addr.address -BAND ([Net.IPAddress] "255.255.0.0").address) -ne ([Net.IPAddress] "169.254.0.0").address }) }
$ifindex = $routeable_interfaces[0].Index
$interface = (Get-WmiObject Win32_NetworkAdapter | Where { $_.DeviceID -eq $ifindex }).netconnectionid
$servers = DnsServers($interface)

if($servers[0] -eq "127.0.0.1")
{
    Write-Host "DNS Servers are set correctly."
}
else
{
    Write-Host "Setting DNS Servers"
    $newDNS = "127.0.0.1", $servers
    Write-Host $newDNS
    Set-DnsClientServerAddress -InterfaceAlias $interface -ServerAddresses $newDNS
    $servers = DnsServers($interface)
    if($servers[0] -ne "127.0.0.1") {
        Write-Error "Failed to set the DNS Servers"
    }
    ReleaseDNSLock
}

if (@(Get-DnsClientCache).Count -ne 0) {
    Clear-DnsClientCache
}

$RegistryPath = "HKLM:\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters"
$ExpectedValue = 0
$Value = Get-ItemProperty -Path $RegistryPath
if ($Value.MaxNegativeCacheTtl -ne $ExpectedValue) {
    Set-ItemProperty -Path $RegistryPath -Name MaxNegativeCacheTtl -Value $ExpectedValue -Type DWord
    $Value = Get-ItemProperty -Path $RegistryPath
    if ($Value.MaxNegativeCacheTtl -ne $ExpectedValue) {
        Write-Error "Error: Expected MaxNegativeCacheTtl to be '${ExpectedValue}', got '${Value.MaxNegativeCacheTtl}'"
    }
}

Exit 0
